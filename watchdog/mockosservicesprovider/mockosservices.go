// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/3rubasa/shwatchdog/watchdog (interfaces: OSServicesProvider)

// Package mockosservicesprovider is a generated GoMock package.
package mockosservicesprovider

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockOSServicesProvider is a mock of OSServicesProvider interface.
type MockOSServicesProvider struct {
	ctrl     *gomock.Controller
	recorder *MockOSServicesProviderMockRecorder
}

// MockOSServicesProviderMockRecorder is the mock recorder for MockOSServicesProvider.
type MockOSServicesProviderMockRecorder struct {
	mock *MockOSServicesProvider
}

// NewMockOSServicesProvider creates a new mock instance.
func NewMockOSServicesProvider(ctrl *gomock.Controller) *MockOSServicesProvider {
	mock := &MockOSServicesProvider{ctrl: ctrl}
	mock.recorder = &MockOSServicesProviderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockOSServicesProvider) EXPECT() *MockOSServicesProviderMockRecorder {
	return m.recorder
}

// Reboot mocks base method.
func (m *MockOSServicesProvider) Reboot() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Reboot")
	ret0, _ := ret[0].(error)
	return ret0
}

// Reboot indicates an expected call of Reboot.
func (mr *MockOSServicesProviderMockRecorder) Reboot() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Reboot", reflect.TypeOf((*MockOSServicesProvider)(nil).Reboot))
}
